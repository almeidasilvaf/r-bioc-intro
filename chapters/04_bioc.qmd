---
execute: 
  warning: false
---

# Analyzing biological data with the Bioconductor ecosystem

[The Bioconductor project](https://bioconductor.org/) was created to develop,
support, and disseminate free open source software to analyze biological data.
It works as a repository of R packages for biological data analysis, with
both "core packages" (developed and maintained by the Bioconductor Core Team),
and community-contributed packages. We usually refer to Bioconductor as a
"package ecosystem" because its packages are tightly integrated and designed
for easy interoperation, such that different packages can be used together
with minimal effort. An important facilitator of such interoperability is
the existence of standardized data structures, such as `GRanges` objects
for genomic coordinates, `DNA/RNA/AAStringSet` objects for sequences,
and `SummarizedExperiment` objects for quantitative data.


Let's start by loading the required packages and data:

```{r}
#| message: false

# Load packages
library(Biostrings)
library(GenomicRanges)
library(SummarizedExperiment)
library(tidyverse)
library(here)
```

## Goals of this lesson

At the end of this lesson, you will be able to:

- read and process sequence data with **`Biostrings`**
- read and process genomic coordinates with **`GenomicRanges`**
- read and process quantitative data (e.g., gene expression) 
with **`SummarizedExperiment`**

## Working with sequences: the **`Biostrings`** package

The **`Biostrings`** package allows efficient manipulation of 
biological sequences, and its data classes are standard for all Bioconductor
packages that involve sequence analyses. The data classes in Biostrings to
represent sets of biological sequences are:

1. `DNAStringSet`: for sets of DNA strings.
2. `RNAStringSet`: for sets of RNA strings.
3. `AAStringSet`: for sets of amino acid strings.

For a single sequence, the each of the above has a correspoding `XString` class
(i.e., `DNAString`, `RNAString`, `AAString`). For example, let's create some
`XString` objects manually:

```{r}
# Create `DNAString` object
dna_seq <- DNAString("ATGGCCGACTCA")
dna_seq

# Convert `DNAString` to `RNAString`
rna_seq <- RNAString(dna_seq)
rna_seq

# Translate `RNAString` to create `AAString`
aa_seq <- translate(rna_seq)
aa_seq
```

In real-world data analyses, we would work with multiple sequences (e.g., 
a whole genome or a whole proteome). Multiple sequences are stored 
in `XStringSet` objects, which can be read from FASTA files 
with `readXStringSet()` functions, namely:

1. `readDNAStringSet()`: read FASTA file containing multiple DNA sequences.
2. `readRNAStringSet()`: read FASTA file containing multiple RNA sequences. 
3. `readAAStringSet()`: read FASTA file containing multiple AA sequences.

For example, let's read an example FASTA file that come with the Biostrings
package.

```{r}
# Path to FASTA file containing an ORF
fasta_file <- system.file("extdata", "someORF.fa", package = "Biostrings")
fasta_file

# Read FASTA file as a DNAStringSet object
dna_seqs <- readDNAStringSet(fasta_file)
dna_seqs
```

Some examples of what you can do to explore `XStringSet` objects include:

```{r}
# width(): get sequence lengths
width(dna_seqs)

# names(): get sequence names
names(dna_seqs)

# subset DNAStringSet and create a DNAStringSet of length 1
dna_seqs[1]

# subset DNAStringSet and create a DNAString object
dna_seqs[[1]]
```

All functions above would also work for `AAStringSet` objects 
and `RNAStringSet` objects.


::: {.callout-tip}

### Practice

Use the `dna_seqs` object created above to answer the following questions:

1. What is the length of the 3rd sequence?
2. What is the name of the 5th sequence?
3. How many times does the **TTCC** sequence string occur in each sequence?
Hint: use the function `vcountPattern()`.
4. What are the first 3 nucleotides of each sequence? 
Hint: use the `subseq()` function.

::: {.callout collapse="true" appearance="minimal"}

### Show me the solutions

```{r}
# Q1: Length of the 3rd sequence
width(dna_seqs)[3]

# Q2: Name of the 5th sequence
names(dna_seqs)[5]

# Q3: Minimum and maximum temperature
vcountPattern("TTCC", dna_seqs)

# Q4: First 3 nucleotides of each sequence
subseq(dna_seqs, start = 1, end = 3)
```

:::
:::

## Working with genomic ranges: the **`GenomicRanges`** package

The **`GenomicRanges`** package implements S4 classes 
to represent genomic ranges as S4 objects. 

Specifically, the `GRanges` class is designed to store a set of intervals
including the name of the sequence where features are located as well as the
range of integer coordinates spanned by the feature in that sequence.

More generally, the `IRanges` class is designed to store a set of intervals
over a range of integer coordinates, without the notion of sequence names.
As such, a `GRanges` object is merely the combination of an `IRanges` object and
a vector of sequence names.

Those S4 classes provide automatic validity-checking functionality,
and a range of methods implementing common operations on integer intervals
and genomic ranges,
from the calculation of distance between pairs of intervals to the
identification of overlapping genomic ranges.

### The `IRanges` class

While the genomic space of many organisms is subdivided into multiple sequences
(e.g., chromosomes), many operations on genomic ranges take place within
individual sequences, where only integer positions matter.
The `IRanges` class provides a container for such "simple" ranges that are
defined by two out of three pieces of information:

- the start position of the range
- the width of the range
- the end position of the range

The `IRanges()` constructor function accepts those three pieces of information
in the arguments `start=`, `width=`, and `end=`.
For instance, we create two integer ranges from their start position and width:

- one range starts at position 10 and has width 10
- one range starts at position 15 and has width 5

```{r}
demo_iranges <- IRanges(start = c(10, 15), width = c(10, 5))
demo_iranges
```

We note how the object displays not only the *start* and *width* information
that we requested for each range, but also the *end* position that is naturally
computed from the other two pieces of information.

::: {.callout-tip}

### Practice

Create the same two ranges as above, using the arguments `start=` and `end=`
of the `IRanges()` constructor function.

::: {.callout appearance="minimal" collapse="true"}

### Show me the solutions

```{r}
IRanges(start = c(10, 15), end = c(19, 19))
```

:::
:::

The start and end positions as well as the width of every interval can be
extracted as numeric vector using the functions `start()`, `end()` and
`width()`, respectively.

```{r}
start(demo_iranges)
end(demo_iranges)
width(demo_iranges)
```

Objects of the `IRanges` family extend the `Vector` class, and are handled as
unidimensional vectors in terms of indexing.
As such, individual ranges can be extracted by integer index like any
regular vector.

```{r}
demo_iranges[1]
```

### Metadata on `IRanges`

The `IRanges` class can accommodate metadata information on each range,
including names - passed to the `names=` argument - and miscellaneous metadata
passed as named vectors.

For instance, we create two ranges named "A" and "B".
Furthermore, we define metadata fields to store an example of character
values and numeric values, respectively.
Both the names and the values of the metadata fields are completely arbitrary
in this example.

```{r}
demo_with_metadata <- IRanges(
    start = c(10,  15),
    end   = c(19,  19),
    names = c("A", "B"),
    character_metadata = c("control", "target"),
    numeric_metadata = c(100, 200)
)

demo_with_metadata
```

The metadata columns can be extracted as a `DataFrame` using the 
function `mcols()` (short for "metadata columns").

```{r}
mcols(demo_with_metadata)
```

The character vector of names can be extracted using the function `names()`.

```{r}
names(demo_with_metadata)
```

Similarly to named vector of base data types, individual ranges can be extracted
by name.

```{r}
demo_with_metadata["A"]
```

### The `GRanges` class

Having defined integer ranges, the only additional information necessary to
define genomic ranges is the name of the genomic sequence on which each range is
located.

For instance, we define two genomic ranges, as follows:

- one genomic range on chromosome 1 (abbreviated "chr1"), from position 10 to 25
- one genomic range on chromosome 2 (abbreviated "chr2"), from position 20 to 35

To do so, we use the `GRanges()` constructor function.
We provide the sequence names as a character vector to the argument `seqnames=`,
and we provide both the start and end position to the argument `ranges=`
as an `IRanges` object.

```{r}
demo_granges <- GRanges(
    seqnames = c("chr1", "chr2"),
    ranges = IRanges(
        start = c(10, 20),
        end   = c(25, 35))
)

demo_granges
```

In the console, the object displays the sequence names in the `seqnames`
component, and the ranges in the form `start-end` in the `ranges` component.
Furthermore, the example above also demonstrate that `GRanges` objects possess a
component called `strand`; the symbol `*` indicates unstranded genomic ranges,
as we have not provided that information.

The strand information can be supplied to the `strand=` argument, for instance:

```{r}
demo_granges2 <- GRanges(
    seqnames = c("chr1", "chr2"),
    ranges = IRanges(
        start = c(10, 20),
        end   = c(25, 35)),
    strand  = c("+", "-")
)

demo_granges2
```

Finally, the examples above also demonstrate that `GRanges` objects include a
component called `seqinfo`, which is occasionally used to store information
about each sequence that may be represented in the `seqnames` component.
In the latest example above, we have not provide any information about any
sequence.
As such, the `seqinfo` component was automatically populated with the names
of the sequences that we used to create the object, while the remaining
pieces of information were left unspecified, as `NA`.

```{r}
seqinfo(demo_granges2)
```

The example above reveals that information about sequences include not only
their respective name and length, but also whether they represent a circular
polymer (e.g., plasmid), and the name of the genome that they are part of.

### Metadata on `GRanges`

Similarly to `IRanges`, metadata can be passed directly to the `GRanges`
constructor function.
For instance:

```{r}
demo_granges3 <- GRanges(
    seqnames = c("chr1", "chr2"),
    ranges = IRanges(
        start = c(10, 20),
        end = c(25, 35)),
    metadata1 = c("control", "target"),
    metadata2 = c(1, 2)
)

demo_granges3
```

### Importing genomic ranges from files

Frequently, large collections of genomic ranges are imported from files rather
than described in manually written code.
In particular, genome-wide annotations of known gene features are distributed
as files on websites such as 
[Ensembl](https://www.ensembl.org/info/data/index.html).

Various file formats are commonly used to store genomic ranges in bioinformatics
workflows.
For instance, the BED (Browser Extensible Data) format is commonly found in
Chromatin Immunoprecipitation Sequencing (ChIP-Seq), while GTF
(Gene Transfer Format, GTF2.2) is the *de facto* standard file format to
describe genomic features such as exons, transcripts, and genes.

In the following example, we import the gene model for Actin Beta (ACTB) from
a small GTF file as a set of genomic ranges.
The example file represents a subset of a GTF file for the *Homo sapiens*
species, downloaded from 
[Ensembl](https://www.ensembl.org/info/data/index.html).
The original file contains more than 3 millions lines and 22 metadata fields,
from which a subset was extracted into a smaller file for this lesson.

In particular, we use the `import()` generic
defined in the `r BiocStyle::Biocpkg("BiocIO")` package - with methods
implemented in the `r BiocStyle::Biocpkg("rtracklayer")` package - as a
versatile function that is capable of recognising common file extensions and
associating them with the appropriate method for parsing each particular file
format.

```{r}
#| message: false
library(rtracklayer)

actb_gtf_data <- rtracklayer::import(here("data", "actb.gtf"))
actb_gtf_data
```

In the example above, the contents of the GTF file were imported into a
`GRanges` object. For each entry in the file, the sequence name, start and end
position, and strand information were used to populate the dedicated components
of the object, while all other pieces of information are stored as separate
columns of metadata.

From here on, this `GRanges` object can be manipulated just like any of the
other `GRanges` objects that we have created earlier in this episode.

### Operations on `GRanges` and the `GRangesList` class

As we have demonstrated so far, `GRanges` objects can be manually defined
or imported from files.
Those often represent genomic regions of interest, and databases of known
genomic features, respectively.
Either way, a number of operations are commonly applied to `GRanges` objects
throughout bioinformatics workflows.

#### Subset

For instance, the `subset()` method is extremely convenient to extract a set
of genomic ranges matching a condition on any component, including sequence
name, start and end position, strand, or any metadata field.
In the example below, we extract all the records of type `transcript` that start
at position `5527147`.

```{r}
subset(actb_gtf_data, type == "transcript" & start == 5527147)
```

#### Split

Separately, the `split()` method is useful to divide a set of genomic ranges
initially stored in a single `GRanges` object into groups that are stored
in a named list of `GRanges` objects.
Conveniently, the `GRangesList` class provides a container for efficiently
displaying and processing lists of `GRanges` objects.

In the example below, we first extract the subset of entries that represent
exons, before separating those exons by transcript identifier, yielding
the result as a `GRangesList` object.

```{r}
actb_exons <- subset(actb_gtf_data, type == "exon")
actb_exons_by_transcript <- split(actb_exons, actb_exons$transcript_id)
actb_exons_by_transcript
```

When printing the object above in the console, the first line confirms the
class of the object as `GRrangesList`, while each named `GRanges` in that list
is introduced by the dollar sign and the name of that item, just like regular
named lists in base R.

#### Length

By nature, many of the methods applicable to `list` objects can be directly
applied to `GRangesList` objects.
For instance, the `lengths()` function can be used on `GRangesList` to display
the length of each `GRanges` object in the list as an integer vector.

In the latest example above, we can compute the number of exons in each transcript
as the length of each `GRanges` object within the `GRangesList`:

```{r}
lengths(actb_exons_by_transcript)
```

::: {.callout-tip}

### Practice

Importantly, the function `lengths()` (with a final `s`) demonstrated above
is different from the function `length()` (without `s`).
The former is meant to be used on list objects, while the latter is meant
to be used on vectors.

What does `length(actb_exons_by_transcript)` return, and why?

::: {.callout appearance="minimal" collapse="true"}

### Show me the solutions

```{r}
length(actb_exons_by_transcript)
```

:::
:::

### Subset by overlap

Possibly one of the most common operations when working with genomic ranges
is to subset arbitrarily large collections of genomic ranges to those located
in a specific region of the genome; for instance, when visualising information
as tracks in a genome browser.

To demonstrate, we manually define a new `GRanges` representing a region of
interest that we will use to extract all of the genomic ranges imported earlier
from the GTF file which overlap that region of interest.

```{r}
region_of_interest <- GRanges(
    seqnames = "7",
    ranges = IRanges(start = 5525830, end = 5531239)
)

actb_in_region <- subsetByOverlaps(x = actb_gtf_data, ranges = region_of_interest)
actb_in_region
```

Like the `subset()` method, the `subsetByOverlaps()` method returns a new
`GRanges` object.
We can visually compare the information printed in the object
(256 ranges in the new subsetted object, relative to 267 ranges in the original
object), or we can programmatically compare the length of the two objects
to check whether the new `GRanges` object is any smaller than the original
`GRanges` object:

```{r}
length(actb_in_region) - length(actb_gtf_data)
```

In the example above, we learn that the new `GRanges` object has 11 records less
than the original `GRanges` object.



## Working with quantitative data: the **`SummarizedExperiment`** package

The figure below represents the anatomy of the SummarizedExperiment class.

![](summarizedExperiment.svg){fig-align="center"}


Objects of the class `SummarizedExperiment` contain :

- **One (or more) assay(s)** containing the quantitative omics data
  (expression data), stored as a matrix-like object. Features (genes,
  transcripts, proteins, ...) are defined along the rows, and samples
  along the columns.

- A **sample metadata** slot containing sample co-variates, stored as a
  data frame. Rows from this table represent samples (rows match exactly the
  columns of the expression data).

- A **feature metadata** slot containing feature co-variates, stored as
  a data frame. The rows of this data frame match exactly the rows of the
  expression data.

The coordinated nature of the `SummarizedExperiment` guarantees that
during data manipulation, the dimensions of the different slots will
always match (i.e the columns in the expression data and then rows in
the sample metadata, as well as the rows in the expression data and
feature metadata) during data manipulation. For example, if we had to
exclude one sample from the assay, it would be automatically removed
from the sample metadata in the same operation.

The metadata slots can grow additional co-variates
(columns) without affecting the other structures.

### Creating a `SummarizedExperiment` object

In order to create a `SummarizedExperiment`, we will create the
individual components, i.e the count matrix, the sample and gene
metadata from csv files. These are typically how RNA-Seq data are
provided (after raw data have been processed).

- **An expression matrix**: we load the count matrix, specifying that
  the first columns contains row/gene names, and convert the
  `data.frame` to a `matrix`.

```{r}
# Read count matrix
count_matrix <- read.csv(here("data", "count_matrix.csv"), row.names = 1) |>
    as.matrix()

# Inspect data
count_matrix[1:5, ]
dim(count_matrix)
```

- **A table describing the samples**, often referred to as sample metadata.

```{r}
# Read sample metadata
sample_metadata <- read.csv(here("data", "sample_metadata.csv"))

# Inspect data
sample_metadata
dim(sample_metadata)
```

- **A table describing the genes**, often referred to as gene metadata.

```{r}
# Read gene metadata
gene_metadata <- read.csv(here("data", "gene_metadata.csv"))

# Inspect data
gene_metadata[1:10, 1:4]
dim(gene_metadata)
```

We will create a `SummarizedExperiment` from these tables:

- The count matrix that will be used as the **assay**

- The table describing the samples will be used as the **colData** slot

- The table describing the genes will be used as the **rowData** slot

To do this we can put the different parts together using the
`SummarizedExperiment` constructor:

```{r}
# Create SummarizedExperiment object
se <- SummarizedExperiment(
    assays = list(counts = count_matrix),
    colData = sample_metadata,
    rowData = gene_metadata
)

se
```

Using this data structure, we can access the expression matrix with
the `assay()` function:

```{r}
head(assay(se))
dim(assay(se))
```

We can access the sample metadata using the `colData()` function:

```{r}
colData(se)
dim(colData(se))
```

We can also access the feature metadata using the `rowData()` function:

```{r}
head(rowData(se))
dim(rowData(se))
```

### Subsetting a `SummarizedExperiment`

`SummarizedExperiment` objects can be subset just like with data frames, with
numerics or with characters of logicals.

Below, we create a new instance of class SummarizedExperiment that
contains only the 5 first features for the 3 first samples.

```{r}
se1 <- se[1:5, 1:3]
se1
```

```{r}
colData(se1)
rowData(se1)
```

We can also use the `colData()` function to subset on something from
the sample metadata or the `rowData()` to subset on something from the
feature metadata.  For example, here we keep only miRNAs and the non
infected samples:

```{r}
# Subset object
se1 <- se[rowData(se)$gene_biotype == "miRNA",
          colData(se)$infection == "NonInfected"]
se1

assay(se1)
colData(se1)
rowData(se1)
```


::: {.callout-tip}

### Practice

1. Extract the gene expression levels of the 3 first genes in samples
at time 0 and at time 8.

::: {.callout appearance="minimal" collapse="true"}

### Show me the solutions

```{r}
assay(se)[1:3, colData(se)$time != 4]

# Equivalent to
assay(se)[1:3, colData(se)$time == 0 | colData(se)$time == 8]
```

:::
:::


### Saving data

Exporting data to a spreadsheet, as we did in a previous lesson, has
several limitations, such as those described in the first chapter
(possible inconsistencies with `,` and `.` for decimal separators and
lack of variable type definitions). Furthermore, exporting data to a
spreadsheet is only relevant for rectangular data such as dataframes
and matrices.

A more general way to save data, that is specific to R and is
guaranteed to work on any operating system, is to use the `saveRDS()`
function. Saving objects like this will generate a binary
representation on disk (using the `rds` file extension here), which
can be loaded back into R using the `readRDS` function.

```{r}
# Save R object as an RDS file
saveRDS(se, file = here("output", "se.rds"))
rm(se)

se <- readRDS(here("output", "se.rds"))
head(se)
```

To conclude, when it comes to saving data from R that will be loaded
again in R, saving and loading with `saveRDS` and `readRDS` is the
preferred approach. If tabular data need to be shared with somebody
that is not using R, then exporting to a text-based spreadsheet is a
good alternative.




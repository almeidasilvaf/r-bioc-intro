{
  "hash": "dc801cb110d2e906720b9fc17212d885",
  "result": {
    "markdown": "---\nexecute: \n  warning: false\n---\n\n\n# Data processing with the **`tidyverse`**\n\nThe **`tidyverse`** package is an \"umbrella-package\" that installs\nseveral useful packages for data analysis which work well together,\nsuch as **`tidyr`**, **`dplyr`**, **`ggplot2`**, **`tibble`**, etc.\nThese packages help us to work and interact with the data.\nThey allow us to do many things with your data, such as subsetting, \ntransforming, visualising, etc.\n\nLet's start by loading the tidyverse package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(here)\n```\n:::\n\n\n## Goals of this lesson\n\nAt the end of this lesson, you will be able to:\n\n- read tabular data from .csv/.tsv/.txt/ files\n- filter your data set to select particular rows and columns\n- add columns\n- summarize data\n- combine different data frames\n- reshape data from long to wide, and back\n\n## The **`readr`** package: reading files\n\nThe data we will use in this lesson are in `data/rnaseq.csv` in\n[the GitHub repo associated with this course](https://github.com/almeidasilvaf/r-bioc-intro). This is a\n*comma-separated file*, which means it contains a table in which columns\nare separated by commas. To read .csv files, we will use the function\n`read_csv()` from the **`readr`** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read csv file\nrna <- read_csv(here(\"data\", \"rnaseq.csv\"))\n\n# Inspect the data\nhead(rna)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 19\n  gene    sample   expression organism   age sex   infection strain  time tissue\n  <chr>   <chr>         <dbl> <chr>    <dbl> <chr> <chr>     <chr>  <dbl> <chr> \n1 Asl     GSM2545…       1170 Mus mus…     8 Fema… Influenz… C57BL…     8 Cereb…\n2 Apod    GSM2545…      36194 Mus mus…     8 Fema… Influenz… C57BL…     8 Cereb…\n3 Cyp2d22 GSM2545…       4060 Mus mus…     8 Fema… Influenz… C57BL…     8 Cereb…\n4 Klk6    GSM2545…        287 Mus mus…     8 Fema… Influenz… C57BL…     8 Cereb…\n5 Fcrls   GSM2545…         85 Mus mus…     8 Fema… Influenz… C57BL…     8 Cereb…\n6 Slc2a4  GSM2545…        782 Mus mus…     8 Fema… Influenz… C57BL…     8 Cereb…\n# ℹ 9 more variables: mouse <dbl>, ENTREZID <dbl>, product <chr>,\n#   ensembl_gene_id <chr>, external_synonym <chr>, chromosome_name <chr>,\n#   gene_biotype <chr>, phenotype_description <chr>,\n#   hsapiens_homolog_associated_gene_name <chr>\n```\n:::\n:::\n\n\nNotice that the class of the data is now referred to as a \"tibble\".\n\nTibbles tweak some of the behaviors of the data frame objects we introduced in the\npreviously. The data structure is very similar to a data frame. For our purposes\nthe only differences are that:\n\n1. It displays the data type of each column under its name.\n  Note that \\<`dbl`\\> is a data type defined to hold numeric values with\n  decimal points.\n\n2. It only prints the first few rows of data and only as many columns as fit on\n  one screen.\n\n## The **`dplyr`** package: filtering, extending, and summarizing data\n\nThe **`dplyr`** is one of the most main packages of the tidyverse, and it\ncan be used to perform all sorts of day-to-day data processing.\nHere, we are going to learn some of the most common **`dplyr`** functions:\n\n- `select()`: subset columns\n- `filter()`: subset rows on conditions\n- `mutate()`: create new columns by using information from other columns\n- `group_by()` and `summarise()`: create summary statistics on grouped data\n- `arrange()`: sort results\n- `count()`: count discrete values\n\n\n### Selecting columns and filtering rows\n\nTo select columns of a data frame, use `select()`. The first argument\nto this function is the data frame (`rna`), and the subsequent\narguments are the columns to keep.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(rna, gene, sample, tissue, expression)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 32,428 × 4\n   gene    sample     tissue     expression\n   <chr>   <chr>      <chr>           <dbl>\n 1 Asl     GSM2545336 Cerebellum       1170\n 2 Apod    GSM2545336 Cerebellum      36194\n 3 Cyp2d22 GSM2545336 Cerebellum       4060\n 4 Klk6    GSM2545336 Cerebellum        287\n 5 Fcrls   GSM2545336 Cerebellum         85\n 6 Slc2a4  GSM2545336 Cerebellum        782\n 7 Exd2    GSM2545336 Cerebellum       1619\n 8 Gjc2    GSM2545336 Cerebellum        288\n 9 Plp1    GSM2545336 Cerebellum      43217\n10 Gnb4    GSM2545336 Cerebellum       1071\n# ℹ 32,418 more rows\n```\n:::\n:::\n\n\nTo select all columns *except* certain ones, put a \"-\" in front of\nthe variable to exclude it. For example, to select all columns but `tissue`\nand `organism`, you'd use:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(rna, -tissue, -organism)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 32,428 × 17\n   gene    sample   expression   age sex   infection strain  time mouse ENTREZID\n   <chr>   <chr>         <dbl> <dbl> <chr> <chr>     <chr>  <dbl> <dbl>    <dbl>\n 1 Asl     GSM2545…       1170     8 Fema… Influenz… C57BL…     8    14   109900\n 2 Apod    GSM2545…      36194     8 Fema… Influenz… C57BL…     8    14    11815\n 3 Cyp2d22 GSM2545…       4060     8 Fema… Influenz… C57BL…     8    14    56448\n 4 Klk6    GSM2545…        287     8 Fema… Influenz… C57BL…     8    14    19144\n 5 Fcrls   GSM2545…         85     8 Fema… Influenz… C57BL…     8    14    80891\n 6 Slc2a4  GSM2545…        782     8 Fema… Influenz… C57BL…     8    14    20528\n 7 Exd2    GSM2545…       1619     8 Fema… Influenz… C57BL…     8    14    97827\n 8 Gjc2    GSM2545…        288     8 Fema… Influenz… C57BL…     8    14   118454\n 9 Plp1    GSM2545…      43217     8 Fema… Influenz… C57BL…     8    14    18823\n10 Gnb4    GSM2545…       1071     8 Fema… Influenz… C57BL…     8    14    14696\n# ℹ 32,418 more rows\n# ℹ 7 more variables: product <chr>, ensembl_gene_id <chr>,\n#   external_synonym <chr>, chromosome_name <chr>, gene_biotype <chr>,\n#   phenotype_description <chr>, hsapiens_homolog_associated_gene_name <chr>\n```\n:::\n:::\n\n\nTo choose rows based on specific criteria, use `filter()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(rna, sex == \"Male\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 14,740 × 19\n   gene    sample  expression organism   age sex   infection strain  time tissue\n   <chr>   <chr>        <dbl> <chr>    <dbl> <chr> <chr>     <chr>  <dbl> <chr> \n 1 Asl     GSM254…        626 Mus mus…     8 Male  Influenz… C57BL…     4 Cereb…\n 2 Apod    GSM254…      13021 Mus mus…     8 Male  Influenz… C57BL…     4 Cereb…\n 3 Cyp2d22 GSM254…       2171 Mus mus…     8 Male  Influenz… C57BL…     4 Cereb…\n 4 Klk6    GSM254…        448 Mus mus…     8 Male  Influenz… C57BL…     4 Cereb…\n 5 Fcrls   GSM254…        180 Mus mus…     8 Male  Influenz… C57BL…     4 Cereb…\n 6 Slc2a4  GSM254…        313 Mus mus…     8 Male  Influenz… C57BL…     4 Cereb…\n 7 Exd2    GSM254…       2366 Mus mus…     8 Male  Influenz… C57BL…     4 Cereb…\n 8 Gjc2    GSM254…        310 Mus mus…     8 Male  Influenz… C57BL…     4 Cereb…\n 9 Plp1    GSM254…      53126 Mus mus…     8 Male  Influenz… C57BL…     4 Cereb…\n10 Gnb4    GSM254…       1355 Mus mus…     8 Male  Influenz… C57BL…     4 Cereb…\n# ℹ 14,730 more rows\n# ℹ 9 more variables: mouse <dbl>, ENTREZID <dbl>, product <chr>,\n#   ensembl_gene_id <chr>, external_synonym <chr>, chromosome_name <chr>,\n#   gene_biotype <chr>, phenotype_description <chr>,\n#   hsapiens_homolog_associated_gene_name <chr>\n```\n:::\n\n```{.r .cell-code}\nfilter(rna, sex == \"Male\" & infection == \"NonInfected\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4,422 × 19\n   gene    sample  expression organism   age sex   infection strain  time tissue\n   <chr>   <chr>        <dbl> <chr>    <dbl> <chr> <chr>     <chr>  <dbl> <chr> \n 1 Asl     GSM254…        535 Mus mus…     8 Male  NonInfec… C57BL…     0 Cereb…\n 2 Apod    GSM254…      13668 Mus mus…     8 Male  NonInfec… C57BL…     0 Cereb…\n 3 Cyp2d22 GSM254…       2008 Mus mus…     8 Male  NonInfec… C57BL…     0 Cereb…\n 4 Klk6    GSM254…       1101 Mus mus…     8 Male  NonInfec… C57BL…     0 Cereb…\n 5 Fcrls   GSM254…        375 Mus mus…     8 Male  NonInfec… C57BL…     0 Cereb…\n 6 Slc2a4  GSM254…        249 Mus mus…     8 Male  NonInfec… C57BL…     0 Cereb…\n 7 Exd2    GSM254…       3126 Mus mus…     8 Male  NonInfec… C57BL…     0 Cereb…\n 8 Gjc2    GSM254…        791 Mus mus…     8 Male  NonInfec… C57BL…     0 Cereb…\n 9 Plp1    GSM254…      98658 Mus mus…     8 Male  NonInfec… C57BL…     0 Cereb…\n10 Gnb4    GSM254…       2437 Mus mus…     8 Male  NonInfec… C57BL…     0 Cereb…\n# ℹ 4,412 more rows\n# ℹ 9 more variables: mouse <dbl>, ENTREZID <dbl>, product <chr>,\n#   ensembl_gene_id <chr>, external_synonym <chr>, chromosome_name <chr>,\n#   gene_biotype <chr>, phenotype_description <chr>,\n#   hsapiens_homolog_associated_gene_name <chr>\n```\n:::\n:::\n\n\nNow, let's imagine we are interested in the human homologs of the mouse\ngenes analysed in this dataset. This information can be found in the\nlast column of the `rna` tibble, named\n`hsapiens_homolog_associated_gene_name`. To visualise it easily, we\nwill create a new table containing just the 2 columns `gene` and\n`hsapiens_homolog_associated_gene_name`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenes <- select(rna, gene, hsapiens_homolog_associated_gene_name)\ngenes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 32,428 × 2\n   gene    hsapiens_homolog_associated_gene_name\n   <chr>   <chr>                                \n 1 Asl     ASL                                  \n 2 Apod    APOD                                 \n 3 Cyp2d22 CYP2D6                               \n 4 Klk6    KLK6                                 \n 5 Fcrls   FCRL2                                \n 6 Slc2a4  SLC2A4                               \n 7 Exd2    EXD2                                 \n 8 Gjc2    GJC2                                 \n 9 Plp1    PLP1                                 \n10 Gnb4    GNB4                                 \n# ℹ 32,418 more rows\n```\n:::\n:::\n\n\nA very nice thing about tidyverse verbs (functions) is that they can be\nexecuted one after the other by using the **pipe** operator (`|>` or `%>%`).\nIn practice, that means you don't have to create intermediate objects\nfor complicated subsetting operations that involve multiple steps. \nThe **pipe** operator is often read as *and then* in the sense that you apply\na function A *and then* you pass the output to function B, *and then* you pass\nthe output to function C, and so on and so forth. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrna |>                                          # <1>\n    filter(sex == \"Male\") |>                    # <2>\n    select(gene, sample, tissue, expression)    # <3>\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 14,740 × 4\n   gene    sample     tissue     expression\n   <chr>   <chr>      <chr>           <dbl>\n 1 Asl     GSM2545340 Cerebellum        626\n 2 Apod    GSM2545340 Cerebellum      13021\n 3 Cyp2d22 GSM2545340 Cerebellum       2171\n 4 Klk6    GSM2545340 Cerebellum        448\n 5 Fcrls   GSM2545340 Cerebellum        180\n 6 Slc2a4  GSM2545340 Cerebellum        313\n 7 Exd2    GSM2545340 Cerebellum       2366\n 8 Gjc2    GSM2545340 Cerebellum        310\n 9 Plp1    GSM2545340 Cerebellum      53126\n10 Gnb4    GSM2545340 Cerebellum       1355\n# ℹ 14,730 more rows\n```\n:::\n:::\n\n1. Take the object `rna`, *and then*\n2. filter it to keep only rows that have \"Male\" in the column `sex`, *and then*\n3. select the columns `gene`, `sample`, `tissue`, `expression`\n\n\n::: {.callout-tip}\n\n### Practice\n\n1. Using pipes, subset the `rna` tibble to keep observations that match \nthe following criteria:\n\n- Female mice\n- Time point 0\n- Expression higher than 50000\n\n  Then, select the columns `gene`, `sample`, `time`, `expression`, and `age`.\n\n\n2. Filter `rna` to keep observations for infected samples, then count\nthe number of rows. Hint: use the `unique()` function to see all the unique\nobservations in a column, and the `nrow()` function the get the number of\nrows in a data frame/tibble.\n\n3. Do the same as above, but now keep only non-infected samples.\n\n\n::: {.callout collapse=\"true\" appearance=\"minimal\"}\n\n### Show me the solutions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Q1\nrna |>\n  filter(\n      sex == \"Female\",\n      time == 0,\n      expression > 50000\n  ) |>\n  select(gene, sample, time, expression, age)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 5\n  gene   sample      time expression   age\n  <chr>  <chr>      <dbl>      <dbl> <dbl>\n1 Plp1   GSM2545337     0     101241     8\n2 Atp1b1 GSM2545337     0      53260     8\n3 Plp1   GSM2545338     0      96534     8\n4 Atp1b1 GSM2545338     0      50614     8\n5 Plp1   GSM2545348     0     102790     8\n6 Atp1b1 GSM2545348     0      59544     8\n7 Plp1   GSM2545353     0      71237     8\n8 Glul   GSM2545353     0      52451     8\n9 Atp1b1 GSM2545353     0      61451     8\n```\n:::\n\n```{.r .cell-code}\n# Q2\nrna |> \n    filter(infection == \"InfluenzaA\") |>\n    nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 22110\n```\n:::\n\n```{.r .cell-code}\n# Q3\nrna |>\n    filter(infection == \"NonInfected\") |>\n    nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10318\n```\n:::\n:::\n\n\n:::\n:::\n\n\n### Adding new columns\n\nFrequently you'll want to create new columns based on the values of existing\ncolumns, for example to do unit conversions, or to find the ratio of values \nin two columns. For this, we'll use `mutate()`.\n\nFor example, the column `time` contains the time in days. Let's create \na new column named `time_hours` that contains the time in hours.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrna |>\n    mutate(time_hours = time * 24) |>\n    select(time, time_hours)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 32,428 × 2\n    time time_hours\n   <dbl>      <dbl>\n 1     8        192\n 2     8        192\n 3     8        192\n 4     8        192\n 5     8        192\n 6     8        192\n 7     8        192\n 8     8        192\n 9     8        192\n10     8        192\n# ℹ 32,418 more rows\n```\n:::\n:::\n\n\nYou can also create a second new column based on the first new column \nwithin the same call of `mutate()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrna |>\n    mutate(\n        time_hours = time * 24,\n        time_minutes = time_hours * 60\n    ) |>\n    select(time, time_hours, time_minutes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 32,428 × 3\n    time time_hours time_minutes\n   <dbl>      <dbl>        <dbl>\n 1     8        192        11520\n 2     8        192        11520\n 3     8        192        11520\n 4     8        192        11520\n 5     8        192        11520\n 6     8        192        11520\n 7     8        192        11520\n 8     8        192        11520\n 9     8        192        11520\n10     8        192        11520\n# ℹ 32,418 more rows\n```\n:::\n:::\n\n\n\n::: {.callout-tip}\n\n### Practice\n\nCreate a new data frame from the `rna` data that meets the following\ncriteria: contains only the `gene`, `chromosome_name`,\n`phenotype_description`, `sample`, and `expression` columns. The expression\nvalues should be log-transformed. This data frame must\nonly contain genes located on sex chromosomes, associated with a\n`phenotype_description`, and with a log expression higher than 5.\n\n**Hint**: think about how the commands should be ordered to produce\nthis data frame!\n\n::: {.callout collapse=\"true\" appearance=\"minimal\"}\n\n### Show me the solutions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrna |>\n  mutate(expression = log(expression)) |>\n  select(gene, chromosome_name, phenotype_description, sample, expression) |>\n  filter(chromosome_name == \"X\" | chromosome_name == \"Y\") |>\n  filter(!is.na(phenotype_description)) |>\n  filter(expression > 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 649 × 5\n   gene   chromosome_name phenotype_description                sample expression\n   <chr>  <chr>           <chr>                                <chr>       <dbl>\n 1 Plp1   X               abnormal CNS glial cell morphology   GSM25…      10.7 \n 2 Slc7a3 X               decreased body length                GSM25…       5.46\n 3 Plxnb3 X               abnormal coat appearance             GSM25…       6.58\n 4 Rbm3   X               abnormal liver morphology            GSM25…       9.32\n 5 Cfp    X               abnormal cardiovascular system phys… GSM25…       6.18\n 6 Ebp    X               abnormal embryonic erythrocyte morp… GSM25…       6.68\n 7 Cd99l2 X               abnormal cellular extravasation      GSM25…       8.04\n 8 Piga   X               abnormal brain development           GSM25…       6.06\n 9 Pim2   X               decreased T cell proliferation       GSM25…       7.11\n10 Itm2a  X               no abnormal phenotype detected       GSM25…       7.48\n# ℹ 639 more rows\n```\n:::\n:::\n\n\n:::\n:::\n\n### Summarizing grouped data\n\nMany data analysis tasks can be approached using the\n*split-apply-combine* paradigm: split the data into groups, apply some\nanalysis to each group, and then combine the results. **`dplyr`**\nmakes this very easy through the use of the `group_by()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrna %>%\n  group_by(gene)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 32,428 × 19\n# Groups:   gene [1,474]\n   gene    sample  expression organism   age sex   infection strain  time tissue\n   <chr>   <chr>        <dbl> <chr>    <dbl> <chr> <chr>     <chr>  <dbl> <chr> \n 1 Asl     GSM254…       1170 Mus mus…     8 Fema… Influenz… C57BL…     8 Cereb…\n 2 Apod    GSM254…      36194 Mus mus…     8 Fema… Influenz… C57BL…     8 Cereb…\n 3 Cyp2d22 GSM254…       4060 Mus mus…     8 Fema… Influenz… C57BL…     8 Cereb…\n 4 Klk6    GSM254…        287 Mus mus…     8 Fema… Influenz… C57BL…     8 Cereb…\n 5 Fcrls   GSM254…         85 Mus mus…     8 Fema… Influenz… C57BL…     8 Cereb…\n 6 Slc2a4  GSM254…        782 Mus mus…     8 Fema… Influenz… C57BL…     8 Cereb…\n 7 Exd2    GSM254…       1619 Mus mus…     8 Fema… Influenz… C57BL…     8 Cereb…\n 8 Gjc2    GSM254…        288 Mus mus…     8 Fema… Influenz… C57BL…     8 Cereb…\n 9 Plp1    GSM254…      43217 Mus mus…     8 Fema… Influenz… C57BL…     8 Cereb…\n10 Gnb4    GSM254…       1071 Mus mus…     8 Fema… Influenz… C57BL…     8 Cereb…\n# ℹ 32,418 more rows\n# ℹ 9 more variables: mouse <dbl>, ENTREZID <dbl>, product <chr>,\n#   ensembl_gene_id <chr>, external_synonym <chr>, chromosome_name <chr>,\n#   gene_biotype <chr>, phenotype_description <chr>,\n#   hsapiens_homolog_associated_gene_name <chr>\n```\n:::\n:::\n\n\nThe `group_by()` function doesn't perform any data processing, it\ngroups the data into subsets: in the example above, our initial\n`tibble` of 32428 observations is split into\n1474 groups based on the `gene` variable.\n\nOnce the data has been grouped, subsequent operations will be\napplied on each group independently by using the `summarise()` function.\nFor example, to compute the mean `expression` by gene, you'd do:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrna |>\n    group_by(gene) |>\n    summarise(mean_expression = mean(expression))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,474 × 2\n   gene     mean_expression\n   <chr>              <dbl>\n 1 AI504432         1053.  \n 2 AW046200          131.  \n 3 AW551984          295.  \n 4 Aamp             4751.  \n 5 Abca12              4.55\n 6 Abcc8            2498.  \n 7 Abhd14a           525.  \n 8 Abi2             4909.  \n 9 Abi3bp           1002.  \n10 Abl2             2124.  \n# ℹ 1,464 more rows\n```\n:::\n:::\n\n\nWe could also calculate the mean expression levels of all genes in each sample:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrna |>\n  group_by(sample) |>\n  summarise(mean_expression = mean(expression))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 22 × 2\n   sample     mean_expression\n   <chr>                <dbl>\n 1 GSM2545336           2062.\n 2 GSM2545337           1766.\n 3 GSM2545338           1668.\n 4 GSM2545339           1696.\n 5 GSM2545340           1682.\n 6 GSM2545341           1638.\n 7 GSM2545342           1594.\n 8 GSM2545343           2107.\n 9 GSM2545344           1712.\n10 GSM2545345           1700.\n# ℹ 12 more rows\n```\n:::\n:::\n\n\nBut we can can also group by multiple columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrna |>\n  group_by(gene, infection, time) |>\n  summarise(mean_expression = mean(expression))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4,422 × 4\n# Groups:   gene, infection [2,948]\n   gene     infection    time mean_expression\n   <chr>    <chr>       <dbl>           <dbl>\n 1 AI504432 InfluenzaA      4           1104.\n 2 AI504432 InfluenzaA      8           1014 \n 3 AI504432 NonInfected     0           1034.\n 4 AW046200 InfluenzaA      4            152.\n 5 AW046200 InfluenzaA      8             81 \n 6 AW046200 NonInfected     0            155.\n 7 AW551984 InfluenzaA      4            302.\n 8 AW551984 InfluenzaA      8            342.\n 9 AW551984 NonInfected     0            238 \n10 Aamp     InfluenzaA      4           4870 \n# ℹ 4,412 more rows\n```\n:::\n:::\n\n\n\n::: {.callout-tip}\n\n### Practice\n\n1. Calculate the mean and median expression of all genes.\n\n2. Calculate the mean expression level of gene \"Dok3\" by timepoints.\n\n::: {.callout appearance=\"minimal\" collapse=\"true\"}\n\n### Show me the solutions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Q1\nrna |>\n    group_by(gene) |>\n    summarise(\n        mean_exp = mean(expression),\n        median_exp = median(expression)\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,474 × 3\n   gene     mean_exp median_exp\n   <chr>       <dbl>      <dbl>\n 1 AI504432  1053.        1008 \n 2 AW046200   131.         130.\n 3 AW551984   295.         273 \n 4 Aamp      4751.        4716.\n 5 Abca12       4.55         5 \n 6 Abcc8     2498.        2367 \n 7 Abhd14a    525.         503 \n 8 Abi2      4909.        4820.\n 9 Abi3bp    1002.        1008.\n10 Abl2      2124.        2134.\n# ℹ 1,464 more rows\n```\n:::\n\n```{.r .cell-code}\n# Q2\nrna |>\n  filter(gene == \"Dok3\") |>\n  group_by(time) |>\n  summarise(mean = mean(expression))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n   time  mean\n  <dbl> <dbl>\n1     0  169 \n2     4  156.\n3     8   61 \n```\n:::\n:::\n\n\n:::\n:::\n\n### Counting observations per group\n\nWhen working with data, we often want to know the number of observations found\nfor each factor or combination of factors. For this task, **`dplyr`** provides\n`count()`. For example, if we wanted to count the number of rows of data for\neach infected and non-infected samples, we would do:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrna |>\n    count(infection)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  infection       n\n  <chr>       <int>\n1 InfluenzaA  22110\n2 NonInfected 10318\n```\n:::\n:::\n\n\nIf we wanted to count a *combination of factors*, such as `infection` \nand `time`, we would specify the first and the second factor as \nthe arguments of `count()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrna |>\n    count(infection, time)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  infection    time     n\n  <chr>       <dbl> <int>\n1 InfluenzaA      4 11792\n2 InfluenzaA      8 10318\n3 NonInfected     0 10318\n```\n:::\n:::\n\n\nIt is sometimes useful to sort the result to facilitate the comparisons.\nWe can use `arrange()` to sort the table.\nFor instance, we might want to arrange the table above by time:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ascending order\nrna |>\n  count(infection, time) |>\n  arrange(time)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  infection    time     n\n  <chr>       <dbl> <int>\n1 NonInfected     0 10318\n2 InfluenzaA      4 11792\n3 InfluenzaA      8 10318\n```\n:::\n\n```{.r .cell-code}\n# Descending order\nrna |>\n  count(infection, time) |>\n  arrange(-time)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  infection    time     n\n  <chr>       <dbl> <int>\n1 InfluenzaA      8 10318\n2 InfluenzaA      4 11792\n3 NonInfected     0 10318\n```\n:::\n:::\n\n\n\n::: {.callout-tip}\n\n### Practice\n\n1. How many genes were analyzed in each sample?\n\n2. Use `group_by()` and `summarise()` to evaluate the sequencing depth \n(the sum of all counts) in each sample. Which sample has the highest \nsequencing depth?\n\n3. Pick one sample and evaluate the number of genes by biotype.\n\n4. Identify genes associated with the \"abnormal DNA methylation\" phenotype description, and calculate their mean expression (in log) at time 0, time 4 and time 8.\n\n::: {.callout appearance=\"minimal\" collapse=\"true\"}\n\n### Show me the solutions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Q1\nrna |>\n  count(sample)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 22 × 2\n   sample         n\n   <chr>      <int>\n 1 GSM2545336  1474\n 2 GSM2545337  1474\n 3 GSM2545338  1474\n 4 GSM2545339  1474\n 5 GSM2545340  1474\n 6 GSM2545341  1474\n 7 GSM2545342  1474\n 8 GSM2545343  1474\n 9 GSM2545344  1474\n10 GSM2545345  1474\n# ℹ 12 more rows\n```\n:::\n\n```{.r .cell-code}\n# Q2\nrna |>\n  group_by(sample) |>\n  summarise(seq_depth = sum(expression)) |>\n  arrange(-seq_depth)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 22 × 2\n   sample     seq_depth\n   <chr>          <dbl>\n 1 GSM2545350   3255566\n 2 GSM2545352   3216163\n 3 GSM2545343   3105652\n 4 GSM2545336   3039671\n 5 GSM2545380   3036098\n 6 GSM2545353   2953249\n 7 GSM2545348   2913678\n 8 GSM2545362   2913517\n 9 GSM2545351   2782464\n10 GSM2545349   2758006\n# ℹ 12 more rows\n```\n:::\n\n```{.r .cell-code}\n# Q3\nrna |>\n  filter(sample == \"GSM2545336\") |>\n  count(gene_biotype) |>\n  arrange(-n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 13 × 2\n   gene_biotype                           n\n   <chr>                              <int>\n 1 protein_coding                      1321\n 2 lncRNA                                69\n 3 processed_pseudogene                  59\n 4 miRNA                                  7\n 5 snoRNA                                 5\n 6 TEC                                    4\n 7 polymorphic_pseudogene                 2\n 8 unprocessed_pseudogene                 2\n 9 IG_C_gene                              1\n10 scaRNA                                 1\n11 transcribed_processed_pseudogene       1\n12 transcribed_unitary_pseudogene         1\n13 transcribed_unprocessed_pseudogene     1\n```\n:::\n\n```{.r .cell-code}\n# Q4\nrna |>\n  filter(phenotype_description == \"abnormal DNA methylation\") |>\n  group_by(gene, time) |>\n  summarise(mean_expression = mean(log(expression))) |>\n  arrange()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n# Groups:   gene [2]\n  gene   time mean_expression\n  <chr> <dbl>           <dbl>\n1 Xist      0            6.95\n2 Xist      4            6.34\n3 Xist      8            7.13\n4 Zdbf2     0            6.27\n5 Zdbf2     4            6.27\n6 Zdbf2     8            6.19\n```\n:::\n:::\n\n\n:::\n:::\n\n\n### Joining tables\n\nIn many real-life situations, data are spread across multiple tables. A common\nexample in transcriptomics is to have gene expression in one table, and\nfunctional annotation for each gene in another table. In these cases, one may\nwant to combine the two tables based on a column in common. \n\nJoining tables can be done with the **`dplyr`** functions `inner_join()`,\n`full_join()`, `left_join()`, and `right_join()`, each of which are\nexemplified in the figure below:\n\n![**`dplyr`** joins](dplyr-joins.png){fig-align=\"center\"}\n\nTo demonstrate that, let's first create a data frame with the mean expression of the\ngenes *Asl*, *Apod*, and *Klk6*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Mean expression of the genes `Asl`, `Apod`, and Klk6\nmean_exp <- rna |>\n    filter(gene %in% c(\"Asl\", \"Apod\", \"Klk6\")) |>\n    group_by(gene) |>\n    summarise(mean_exp = mean(expression))\n```\n:::\n\n\nNext, we will load a table with genes and their descriptions, available in \n`data/gene_descriptions.csv`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read data\ndescriptions <- read_csv(here(\"data\", \"gene_descriptions.csv\"))\n\n# Inspect data\nhead(descriptions)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  gene    gene_description                                                      \n  <chr>   <chr>                                                                 \n1 Cyp2d22 cytochrome P450, family 2, subfamily d, polypeptide 22 [Source:MGI Sy…\n2 Klk6    kallikrein related-peptidase 6 [Source:MGI Symbol;Acc:MGI:1343166]    \n3 Fcrls   Fc receptor-like S, scavenger receptor [Source:MGI Symbol;Acc:MGI:193…\n4 Plp1    proteolipid protein (myelin) 1 [Source:MGI Symbol;Acc:MGI:97623]      \n5 Exd2    exonuclease 3'-5' domain containing 2 [Source:MGI Symbol;Acc:MGI:1922…\n6 Apod    apolipoprotein D [Source:MGI Symbol;Acc:MGI:88056]                    \n```\n:::\n:::\n\n\nNow, we will combine the two tables so that we have the mean expression for\neach gene + gene descriptions in a single table. To combine the two tables\nwhile keeping only genes present in the column `gene` of both tables,\nwe will use the function `inner_join()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninner_join(mean_exp, descriptions)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  gene  mean_exp gene_description                                               \n  <chr>    <dbl> <chr>                                                          \n1 Apod    18968. apolipoprotein D [Source:MGI Symbol;Acc:MGI:88056]             \n2 Asl       708. argininosuccinate lyase [Source:MGI Symbol;Acc:MGI:88084]      \n3 Klk6      554. kallikrein related-peptidase 6 [Source:MGI Symbol;Acc:MGI:1343…\n```\n:::\n:::\n\n\n::: {.callout-tip}\n\n### Challenge\n\nJoin the tables `mean_exp` and `descriptions` using the function `full_join()`.\nHow does the output change?\n\n::: {.callout appearance=\"minimal\" collapse=\"true\"}\n\n### Show me the solutions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfull_join(mean_exp, descriptions)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 3\n   gene    mean_exp gene_description                                            \n   <chr>      <dbl> <chr>                                                       \n 1 Apod      18968. apolipoprotein D [Source:MGI Symbol;Acc:MGI:88056]          \n 2 Asl         708. argininosuccinate lyase [Source:MGI Symbol;Acc:MGI:88084]   \n 3 Klk6        554. kallikrein related-peptidase 6 [Source:MGI Symbol;Acc:MGI:1…\n 4 Cyp2d22      NA  cytochrome P450, family 2, subfamily d, polypeptide 22 [Sou…\n 5 Fcrls        NA  Fc receptor-like S, scavenger receptor [Source:MGI Symbol;A…\n 6 Plp1         NA  proteolipid protein (myelin) 1 [Source:MGI Symbol;Acc:MGI:9…\n 7 Exd2         NA  exonuclease 3'-5' domain containing 2 [Source:MGI Symbol;Ac…\n 8 Gnb4         NA  guanine nucleotide binding protein (G protein), beta 4 [Sou…\n 9 Slc2a4       NA  solute carrier family 2 (facilitated glucose transporter), …\n10 Gjc2         NA  gap junction protein, gamma 2 [Source:MGI Symbol;Acc:MGI:21…\n```\n:::\n:::\n\n\n:::\n:::\n\n\n## The **`tidyr`** package: from long to wide, and vice versa\n\nIn the `rna` tibble, the rows contain expression values (the unit) that are\nassociated with a combination of 2 other variables: `gene` and `sample`.\n\nAll the other columns correspond to variables describing either\nthe sample (organism, age, sex, ...) or the gene (gene\\_biotype, ENTREZ\\_ID, product, ...).\nThe variables that don't change with genes or with samples will have \nthe same value in all the rows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrna |>\n  arrange(gene)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 32,428 × 19\n   gene     sample expression organism   age sex   infection strain  time tissue\n   <chr>    <chr>       <dbl> <chr>    <dbl> <chr> <chr>     <chr>  <dbl> <chr> \n 1 AI504432 GSM25…       1230 Mus mus…     8 Fema… Influenz… C57BL…     8 Cereb…\n 2 AI504432 GSM25…       1085 Mus mus…     8 Fema… NonInfec… C57BL…     0 Cereb…\n 3 AI504432 GSM25…        969 Mus mus…     8 Fema… NonInfec… C57BL…     0 Cereb…\n 4 AI504432 GSM25…       1284 Mus mus…     8 Fema… Influenz… C57BL…     4 Cereb…\n 5 AI504432 GSM25…        966 Mus mus…     8 Male  Influenz… C57BL…     4 Cereb…\n 6 AI504432 GSM25…        918 Mus mus…     8 Male  Influenz… C57BL…     8 Cereb…\n 7 AI504432 GSM25…        985 Mus mus…     8 Fema… Influenz… C57BL…     8 Cereb…\n 8 AI504432 GSM25…        972 Mus mus…     8 Male  NonInfec… C57BL…     0 Cereb…\n 9 AI504432 GSM25…       1000 Mus mus…     8 Fema… Influenz… C57BL…     4 Cereb…\n10 AI504432 GSM25…        816 Mus mus…     8 Male  Influenz… C57BL…     4 Cereb…\n# ℹ 32,418 more rows\n# ℹ 9 more variables: mouse <dbl>, ENTREZID <dbl>, product <chr>,\n#   ensembl_gene_id <chr>, external_synonym <chr>, chromosome_name <chr>,\n#   gene_biotype <chr>, phenotype_description <chr>,\n#   hsapiens_homolog_associated_gene_name <chr>\n```\n:::\n:::\n\n\nThis structure is called a `long-format`, as one column contains all the values,\nand other column(s) list(s) the context of the value.\n\nIn certain cases, the `long-format` is not really \"human-readable\", and another format,\na `wide-format` is preferred, as a more compact way of representing the data.\nThis is typically the case with gene expression values that scientists are used to\nlook as matrices, were rows represent genes and columns represent samples.\n\nIn this format, it would therefore become straightforward\nto explore the relationship between the gene expression levels within, and\nbetween, the samples.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,474 × 23\n   gene    GSM2545336 GSM2545337 GSM2545338 GSM2545339 GSM2545340 GSM2545341\n   <chr>        <dbl>      <dbl>      <dbl>      <dbl>      <dbl>      <dbl>\n 1 Asl           1170        361        400        586        626        988\n 2 Apod         36194      10347       9173      10620      13021      29594\n 3 Cyp2d22       4060       1616       1603       1901       2171       3349\n 4 Klk6           287        629        641        578        448        195\n 5 Fcrls           85        233        244        237        180         38\n 6 Slc2a4         782        231        248        265        313        786\n 7 Exd2          1619       2288       2235       2513       2366       1359\n 8 Gjc2           288        595        568        551        310        146\n 9 Plp1         43217     101241      96534      58354      53126      27173\n10 Gnb4          1071       1791       1867       1430       1355        798\n# ℹ 1,464 more rows\n# ℹ 16 more variables: GSM2545342 <dbl>, GSM2545343 <dbl>, GSM2545344 <dbl>,\n#   GSM2545345 <dbl>, GSM2545346 <dbl>, GSM2545347 <dbl>, GSM2545348 <dbl>,\n#   GSM2545349 <dbl>, GSM2545350 <dbl>, GSM2545351 <dbl>, GSM2545352 <dbl>,\n#   GSM2545353 <dbl>, GSM2545354 <dbl>, GSM2545362 <dbl>, GSM2545363 <dbl>,\n#   GSM2545380 <dbl>\n```\n:::\n:::\n\n\nTo convert the gene expression values from `rna` into a wide format,\nwe need to create a new table where the values of the `sample` column would\nbecome the names of column variables.\n\nThe key point here is that we are still following\na tidy data structure, but we have **reshaped** the data according to\nthe observations of interest: expression levels per gene instead\nof recording them per gene and per sample.\n\nReshaping data from long to wide format can be performed with the function\n`pivot_wider()` from **`tidyr`**. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrna_wide <- rna |>                            \n    select(gene, sample, expression) |>       # <1>\n    pivot_wider(\n        names_from = sample,                  # <2>\n        values_from = expression              # <3>\n    )\n\nrna_wide\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,474 × 23\n   gene    GSM2545336 GSM2545337 GSM2545338 GSM2545339 GSM2545340 GSM2545341\n   <chr>        <dbl>      <dbl>      <dbl>      <dbl>      <dbl>      <dbl>\n 1 Asl           1170        361        400        586        626        988\n 2 Apod         36194      10347       9173      10620      13021      29594\n 3 Cyp2d22       4060       1616       1603       1901       2171       3349\n 4 Klk6           287        629        641        578        448        195\n 5 Fcrls           85        233        244        237        180         38\n 6 Slc2a4         782        231        248        265        313        786\n 7 Exd2          1619       2288       2235       2513       2366       1359\n 8 Gjc2           288        595        568        551        310        146\n 9 Plp1         43217     101241      96534      58354      53126      27173\n10 Gnb4          1071       1791       1867       1430       1355        798\n# ℹ 1,464 more rows\n# ℹ 16 more variables: GSM2545342 <dbl>, GSM2545343 <dbl>, GSM2545344 <dbl>,\n#   GSM2545345 <dbl>, GSM2545346 <dbl>, GSM2545347 <dbl>, GSM2545348 <dbl>,\n#   GSM2545349 <dbl>, GSM2545350 <dbl>, GSM2545351 <dbl>, GSM2545352 <dbl>,\n#   GSM2545353 <dbl>, GSM2545354 <dbl>, GSM2545362 <dbl>, GSM2545363 <dbl>,\n#   GSM2545380 <dbl>\n```\n:::\n:::\n\n1. Select columns `gene`, `sample`, and `expression`\n2. Columns names of the wide table will be the values of the `sample` column\n3. Values in the wide table will be the values of the `expression` column\n\n\nTo reshape data back to the long format, we would use the \nfunction `pivot_longer()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrna_long <- rna_wide |>\n    pivot_longer(\n        -gene,                           # <1>\n        names_to = \"sample\",             # <2>\n        values_to = \"expression\"         # <3>\n    )\n\nrna_long\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 32,428 × 3\n   gene  sample     expression\n   <chr> <chr>           <dbl>\n 1 Asl   GSM2545336       1170\n 2 Asl   GSM2545337        361\n 3 Asl   GSM2545338        400\n 4 Asl   GSM2545339        586\n 5 Asl   GSM2545340        626\n 6 Asl   GSM2545341        988\n 7 Asl   GSM2545342        836\n 8 Asl   GSM2545343        535\n 9 Asl   GSM2545344        586\n10 Asl   GSM2545345        597\n# ℹ 32,418 more rows\n```\n:::\n:::\n\n1. Use all columns except `gene`.\n2. Column names of the wide table will become a variable named *sample*\n3. Values in the wide table will become a variable named *expression*\n\n\n::: {.callout-tip}\n\n### Practice\n\nStarting from the rna table, use the `pivot_wider()` function to create\na wide-format table giving the gene expression levels in each mouse.\nThen use the `pivot_longer()` function to restore a long-format table.\n\n::: {.callout appearance=\"minimal\" collapse=\"true\"}\n\n### Show me the solutions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrna1 <- rna |>\n    select(gene, mouse, expression) |>\n    pivot_wider(names_from = mouse, values_from = expression)\n\nrna1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,474 × 23\n   gene     `14`    `9`  `10`  `15`  `18`   `6`   `5`  `11`  `22`  `13`  `23`\n   <chr>   <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 Asl      1170    361   400   586   626   988   836   535   586   597   938\n 2 Apod    36194  10347  9173 10620 13021 29594 24959 13668 13230 15868 27769\n 3 Cyp2d22  4060   1616  1603  1901  2171  3349  3122  2008  2254  2277  2985\n 4 Klk6      287    629   641   578   448   195   186  1101   537   567   327\n 5 Fcrls      85    233   244   237   180    38    68   375   199   177    89\n 6 Slc2a4    782    231   248   265   313   786   528   249   266   357   654\n 7 Exd2     1619   2288  2235  2513  2366  1359  1474  3126  2379  2173  1531\n 8 Gjc2      288    595   568   551   310   146   186   791   454   370   240\n 9 Plp1    43217 101241 96534 58354 53126 27173 28728 98658 61356 61647 38019\n10 Gnb4     1071   1791  1867  1430  1355   798   806  2437  1394  1554   960\n# ℹ 1,464 more rows\n# ℹ 11 more variables: `24` <dbl>, `8` <dbl>, `7` <dbl>, `1` <dbl>, `16` <dbl>,\n#   `21` <dbl>, `4` <dbl>, `2` <dbl>, `20` <dbl>, `12` <dbl>, `19` <dbl>\n```\n:::\n\n```{.r .cell-code}\nrna1 |>\n    pivot_longer(-gene, names_to = \"mouse_id\", values_to = \"counts\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 32,428 × 3\n   gene  mouse_id counts\n   <chr> <chr>     <dbl>\n 1 Asl   14         1170\n 2 Asl   9           361\n 3 Asl   10          400\n 4 Asl   15          586\n 5 Asl   18          626\n 6 Asl   6           988\n 7 Asl   5           836\n 8 Asl   11          535\n 9 Asl   22          586\n10 Asl   13          597\n# ℹ 32,418 more rows\n```\n:::\n:::\n\n\n:::\n:::\n\n\n## Exporting data\n\nFinally, to export tabular data, we will use the `write_*` functions\nfrom the **`tidyr`** package. Here, we will export the tibble `rna_wide`\nto a .csv file. For that, we will use the function `write_csv()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(rna_wide, file = here(\"output\", \"rna_wide.csv\"))\n```\n:::\n",
    "supporting": [
      "02_tidyverse_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
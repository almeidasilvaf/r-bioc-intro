{
  "hash": "798e14ffd69893d1501c429825c68350",
  "result": {
    "markdown": "---\nexecute: \n  warning: false\n---\n\n\n# Visualizing data with **`ggplot2`**\n\n`ggplot2` is a plotting package that makes it simple to create complex\nplots from data in a data frame. It provides a more programmatic\ninterface for specifying what variables to plot, how they are displayed,\nand general visual properties. The theoretical foundation that supports\nthe `ggplot2` is the *Grammar of Graphics*. Using this\napproach, we only need minimal changes if the underlying data change or\nif we decide to change from a bar plot to a scatterplot. This helps in\ncreating publication quality plots with minimal amounts of adjustments\nand tweaking.\n\n\nLet's start by loading the required packages and data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(tidyverse)\nlibrary(here)\n\n# Load data\nrna <- read_csv(here(\"data\", \"rnaseq.csv\"))\n```\n:::\n\n\n## Goals of this lesson\n\nAt the end of this lesson, you will be able to:\n\n- create plots with **`ggplot2`** for different kinds of data\n- customize plots\n- arrange plots in complex figures\n\n## Plotting with ggplot2\n\n`ggplot2` functions like data in the 'long' format, i.e., a column for\nevery dimension, and a row for every observation. Well-structured data\nwill save you lots of time when making figures with `ggplot2`.\n\nggplot graphics are built step by step by adding new elements. Adding\nlayers in this fashion allows for extensive flexibility and\ncustomization of plots. As stated in RStudio's Data Visualization Cheat Sheet:\n\n> The idea behind the Grammar of Graphics it is that you can build every\n> graph from the same 3 components: (1) a data set, (2) a coordinate system,\n> and (3) geoms — i.e. visual marks that represent data points.\n\nTo build a ggplot, we will use the following basic template that can be\nused for different types of plots:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(<DATA>, aes(<MAPPINGS>)) + \n  <GEOM_FUNCTION>()\n```\n:::\n\n\nFor example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(                    \n    rna,                   # <1>\n    aes(x = expression)    # <2>\n) +\n  geom_histogram()         # <3>\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n1. Use the `ggplot()` function and bind the plot to a \nspecific **data frame** using the `data` argument.\n2. Define a **mapping** (using the aesthetic (`aes`) function), by\nselecting the variables to be plotted and specifying how to present\nthem in the graph, e.g. as x/y positions or characteristics such as\nsize, shape, color, etc.\n3. Add '**geoms**' - geometries, or graphical representations of the\ndata in the plot (points, lines, bars). `ggplot2` offers many\ndifferent geoms.\n\n\n**`ggplot2`** offers many different geometries, such as:\n\n- `geom_point()` for scatter plots, dot plots, etc.\n- `geom_histogram()` for histograms\n- `geom_boxplot()` for boxplots\n- `geom_line()` for trend lines, time series, etc\n- and much more!\n\nBesides, several people have extended the **`ggplot2`** ecosystem by creating\nnew packages with geoms that are field-specific (e.g., `geom_nodes()` from\nthe package **`ggnetwork`** to plot networks).\n\n::: {.callout-tip}\n\n### Practice\n\nYou have probably noticed an automatic message that appears when\ndrawing the histogram:\n\n\n::: {.cell}\n\n:::\n\n\nChange the arguments `bins` or `binwidth` of `geom_histogram()` to\nchange the number or width of the bins.\n\n::: {.callout appearance=\"minimal\" collapse=\"true\"}\n\n### Show me the solutions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Change bins\nggplot(rna, aes(x = expression)) +\n    geom_histogram(bins = 15)\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Change binwidth\nggplot(rna, aes(x = expression)) +\n    geom_histogram(binwidth = 2000)\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n:::\n\n\n:::\n:::\n\nWe can observe here that the data are skewed to the right. We can apply\nlog2 transformation to have a more symmetric distribution. Note that we\nadd here a small constant value (`+1`) to avoid having `-Inf` values\nreturned for expression values equal to 0.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrna <- rna %>%\n  mutate(expression_log = log2(expression + 1))\n```\n:::\n\n\nIf we now draw the histogram of the log2-transformed expressions, the\ndistribution is indeed closer to a normal distribution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rna, aes(x = expression_log)) + \n    geom_histogram()\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/second-ggplot-1.png){width=672}\n:::\n:::\n\n\nFrom now on we will work on the log-transformed expression values.\n\n## Building your plots iteratively\n\nWe will now draw a scatter plot with two continuous variables and the\n`geom_point()` function. This graph will represent the log2 fold changes\nof expression comparing time 8 versus time 0, and time 4 versus time 0.\nTo this end, we first need to compute the means of the log-transformed\nexpression values by gene and time, then the log fold changes by\nsubtracting the mean log expressions between time 8 and time 0 and\nbetween time 4 and time 0. Note that we also include here the gene\nbiotype that we will use later on to represent the genes. We will save\nthe fold changes in a new data frame called `rna_fc.`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrna_fc <- rna |>\n    select(gene, time, gene_biotype, expression_log) |>\n    group_by(gene, time, gene_biotype) |>\n    summarise(mean_exp = mean(expression_log)) |>\n    pivot_wider(names_from = time, values_from = mean_exp) |>\n    mutate(time_8_vs_0 = `8` - `0`, time_4_vs_0 = `4` - `0`)\n\nhead(rna_fc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 7\n# Groups:   gene [6]\n  gene     gene_biotype     `0`   `4`   `8` time_8_vs_0 time_4_vs_0\n  <chr>    <chr>          <dbl> <dbl> <dbl>       <dbl>       <dbl>\n1 AI504432 lncRNA         10.0  10.1   9.97     -0.0357      0.0754\n2 AW046200 lncRNA          7.28  7.23  6.35     -0.930      -0.0497\n3 AW551984 protein_coding  7.86  7.26  8.19      0.334      -0.596 \n4 Aamp     protein_coding 12.2  12.2  12.2       0.0391      0.0754\n5 Abca12   protein_coding  2.51  2.34  2.33     -0.180      -0.173 \n6 Abcc8    protein_coding 11.3  11.3  11.2      -0.164       0.0234\n```\n:::\n:::\n\n\nWe can then build a ggplot with the newly created dataset `rna_fc`.\nBuilding plots with `ggplot2` is typically an iterative process. We\nstart by defining the dataset we'll use, lay out the axes, and choose a\ngeom:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rna_fc, aes(x = time_4_vs_0, y = time_8_vs_0)) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nThen, we start modifying this plot to extract more information from it.\nFor instance, we can add transparency (`alpha`) to avoid overplotting:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rna_fc, aes(x = time_4_vs_0, y = time_8_vs_0)) +\n    geom_point(alpha = 0.3)\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nWe can also add colors for all the points:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rna_fc, aes(x = time_4_vs_0, y = time_8_vs_0)) +\n    geom_point(alpha = 0.3, color = \"blue\")\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nOr to color each gene in the plot differently, you could use a vector as\nan input to the argument **color**. `ggplot2` will provide a different\ncolor corresponding to different values in the vector. Here is an\nexample where we color with `gene_biotype`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rna_fc, aes(x = time_4_vs_0, y = time_8_vs_0)) +\n    geom_point(alpha = 0.3, aes(color = gene_biotype))\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nWe can also specify the colors directly inside the mapping provided in\nthe `ggplot()` function. This will be seen by any geom layers and the\nmapping will be determined by the x- and y-axis set up in `aes()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rna_fc, aes(x = time_4_vs_0, y = time_8_vs_0, color = gene_biotype)) +\n    geom_point(alpha = 0.3)\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nFinally, we could also add a diagonal line with the `geom_abline()`\nfunction:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rna_fc, aes(x = time_4_vs_0, y = time_8_vs_0, color = gene_biotype)) +\n    geom_point(alpha = 0.3) +\n    geom_abline(intercept = 0)\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nNotice that we can change the geom layer from `geom_point` to\n`geom_jitter` and colors will still be determined by `gene_biotype`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rna_fc, aes(x = time_4_vs_0, y = time_8_vs_0, color = gene_biotype)) +\n    geom_jitter(alpha = 0.3) +\n    geom_abline(intercept = 0)\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip}\n\n### Practice\n\nUse what you just learned to create a scatter plot of `expression_log`\nover `sample` from the `rna` dataset with the time showing in\ndifferent colors. Is this a good way to show this type of data?\n\n::: {.callout appearance=\"minimal\" collapse=\"true\"}\n\n### Show me the solutions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rna, aes(y = expression_log, x = sample)) +\n    geom_point(aes(color = time))\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n:::\n:::\n\n## Visualizing distributions\n\nWe can use boxplots to visualize the distribution of gene expressions\nwithin each sample:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rna, aes(y = expression_log, x = sample)) +\n    geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nBy adding points to the boxplot, we can have a better idea of the number of\nmeasurements and of their distribution:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rna, aes(y = expression_log, x = sample)) +\n    geom_jitter(alpha = 0.2, color = \"tomato\") +\n    geom_boxplot(alpha = 0)\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n::: {.callout-tip}\n\n### Practice\n\nNote how the boxplot layer is in front of the jitter layer? What do\nyou need to change in the code to put the boxplot behind the points?\n\n::: {.callout apperance=\"minimal\" collapse=\"true\"}\n\n### Show me the solutions\n\nWe should switch the order of these two geoms:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rna, aes(y = expression_log, x = sample)) +\n    geom_boxplot(alpha = 0) +\n    geom_jitter(alpha = 0.2, color = \"tomato\")\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/boxplot-with-points2-1.png){width=672}\n:::\n:::\n\n\n:::\n:::\n\nYou may notice that the values on the x-axis are still not properly\nreadable. Let's change the orientation of the labels and adjust them\nvertically and horizontally so they don't overlap. You can use a\n90-degree angle, or experiment to find the appropriate angle for\ndiagonally oriented labels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rna, aes(y = expression_log, x = sample)) +\n    geom_jitter(alpha = 0.2, color = \"tomato\") +\n    geom_boxplot(alpha = 0) +\n    theme(axis.text.x = element_text(angle = 90, hjust = 0.5, vjust = 0.5))\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip}\n\n### Practice\n\n1. Add color to the data points on your boxplot according to the duration\nof the infection (`time`). *Hint:* Check the class for `time`. Consider changing the class of `time` from integer to factor directly in the ggplot mapping. Why does\nthis change how R makes the graph?\n\n2. Boxplots are useful summaries, but hide the *shape* of the\ndistribution. For example, if the distribution is bimodal, we would\nnot see it in a boxplot. An alternative to the boxplot is the violin\nplot, where the shape (of the density of points) is drawn.\n\nReplace the box plot with a violin plot; see `geom_violin()`. Fill\nin the violins according to the time with the argument `fill`.\n\n\n::: {.callout appearance=\"minimal\" collapse=\"true\"}\n\n### Show me the solutions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Q1\nggplot(rna, aes(y = expression_log, x = sample)) +\n    geom_jitter(alpha = 0.2, aes(color = as.factor(time))) +\n    geom_boxplot(alpha = 0) +\n    theme(axis.text.x = element_text(angle = 90, hjust = 0.5, vjust = 0.5))\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Q2\nggplot(rna, aes(y = expression_log, x = sample)) +\n    geom_violin(aes(fill = as.factor(time))) +\n    theme(axis.text.x = element_text(angle = 90, hjust = 0.5, vjust = 0.5))\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-19-2.png){width=672}\n:::\n:::\n\n\n:::\n:::\n\n## Line plots\n\nLine plots are an excellent way of visualizing time-series data. \nHere, we will calculate the mean expression per duration of the infection for\nthe 10 genes having the highest log fold changes comparing time 8 versus\ntime 0. First, we need to select the genes and create a subset of `rna`\ncalled `sub_rna` containing the 10 selected genes. Then, we need to group\nthe data and calculate the mean gene expression within each group:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get genes with highest fold changes comparing time points 8 to 0\ngenes_selected <- rna_fc |>\n    arrange(-time_8_vs_0) |>\n    head(n = 10) |>\n    pull(gene) \n\n\n# Get mean expression by time\nmean_exp_by_time <- rna |>\n    filter(gene %in% genes_selected) |>\n    group_by(gene, time) |>\n    summarise(mean_exp = mean(expression_log))\n\nmean_exp_by_time\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 30 × 3\n# Groups:   gene [10]\n   gene   time mean_exp\n   <chr> <dbl>    <dbl>\n 1 Acr       0     5.07\n 2 Acr       4     5.54\n 3 Acr       8     7.31\n 4 Aipl1     0     3.70\n 5 Aipl1     4     3.89\n 6 Aipl1     8     6.56\n 7 Bst1      0     3.20\n 8 Bst1      4     3.77\n 9 Bst1      8     5.22\n10 Chil3     0     4.00\n# ℹ 20 more rows\n```\n:::\n:::\n\n\nWe can build the line plot with duration of the infection on the x-axis\nand the mean expression on the y-axis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mean_exp_by_time, aes(x = time, y = mean_exp)) +\n    geom_line()\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\nUnfortunately, this does not work because we plotted data for all the\ngenes together. We need to tell ggplot to draw a line for each gene by\nmodifying the aesthetic function to include `group = gene`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mean_exp_by_time, aes(x = time, y = mean_exp, group = gene)) +\n    geom_line()\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\nWe will be able to distinguish genes in the plot if we add colors (using\n`color` also automatically groups the data):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mean_exp_by_time, aes(x = time, y = mean_exp, color = gene)) +\n    geom_line()\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n## Faceting\n\n**`ggplot2`** has a special technique called *faceting* that allows the user\nto split one plot into multiple (sub) plots based on a factor included\nin the dataset. These different subplots inherit the same properties\n(axes limits, ticks, ...) to facilitate their direct comparison. We will\nuse it to make a line plot across time for each gene:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mean_exp_by_time, aes(x = time, y = mean_exp)) + \n    geom_line() +\n    facet_wrap(~gene)\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\nHere both x- and y-axis have the same scale for all the subplots. You\ncan change this default behavior by modifying `scales` in order to allow\na free scale for the y-axis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mean_exp_by_time, aes(x = time, y = mean_exp)) +\n    geom_line() +\n    facet_wrap(~gene, scales = \"free_y\")\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\nNow, we would like to split the line in each plot by the sex of the mice.\nTo do that, we need to calculate the mean expression in the data frame\ngrouped by `gene`, `time`, and `sex`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_exp_by_time_sex <- rna |>\n    filter(gene %in% genes_selected) |>\n    group_by(gene, time, sex) |>\n    summarise(mean_exp = mean(expression_log))\n\nmean_exp_by_time_sex\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 60 × 4\n# Groups:   gene, time [30]\n   gene   time sex    mean_exp\n   <chr> <dbl> <chr>     <dbl>\n 1 Acr       0 Female     5.13\n 2 Acr       0 Male       5.00\n 3 Acr       4 Female     5.93\n 4 Acr       4 Male       5.15\n 5 Acr       8 Female     7.27\n 6 Acr       8 Male       7.36\n 7 Aipl1     0 Female     3.67\n 8 Aipl1     0 Male       3.73\n 9 Aipl1     4 Female     4.07\n10 Aipl1     4 Male       3.72\n# ℹ 50 more rows\n```\n:::\n:::\n\n\nWe can now make the faceted plot by splitting further by sex using\n`color` (within a single plot):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mean_exp_by_time_sex, aes(x = time, y = mean_exp, color = sex)) +\n    geom_line() +\n    facet_wrap(~gene, scales = \"free_y\")\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\nUsually, plots with white background look more readable when printed. We\ncan set the background to white using the function `theme_bw()`.\nAdditionally, we can remove the grid:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mean_exp_by_time_sex, aes(x = time, y = mean_exp, color = sex)) +\n    geom_line() +\n    facet_wrap(~gene, scales = \"free_y\") +\n    theme_bw() +\n    theme(panel.grid = element_blank())\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\n::: {.callout-tip}\n\n### Practice\n\nUse what you just learned to create a plot that depicts how the\naverage expression of each chromosome changes through the duration of\ninfection.\n\n::: {.callout appearance=\"minimal\" collapse=\"true\"}\n\n### Show me the solutions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_exp_by_chromosome <- rna |>\n    group_by(chromosome_name, time) |>\n    summarize(mean_exp = mean(expression_log))\n\nggplot(mean_exp_by_chromosome, aes(x = time, y = mean_exp)) +\n    geom_line() +\n    facet_wrap(~chromosome_name, scales = \"free_y\")\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n:::\n:::\n\nThe `facet_wrap` geometry extracts plots into an arbitrary number of\ndimensions to allow them to cleanly fit on one page. On the other hand,\nthe `facet_grid` geometry allows you to explicitly specify how you want\nyour plots to be arranged via formula notation (`rows ~ columns`; a `.`\ncan be used as a placeholder that indicates only one row or column).\n\nLet's modify the previous plot to compare how the mean gene expression\nof males and females has changed through time:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create plot\np <- ggplot(mean_exp_by_time_sex, aes(x = time, y = mean_exp, color = gene)) +\n    geom_line()\n\n# One column, facet by rows\np + facet_grid(sex ~ .)\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# One row, facet by column\np + facet_grid(. ~ sex)\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-30-2.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip}\n\n### Friendly tip: **`ggplot2`** themes\n\nIn addition to `theme_bw()`, which changes the plot background to white,\n`ggplot2` comes with several other themes which can be useful to quickly\nchange the look of your visualization. The complete list of themes is\navailable at [https://ggplot2.tidyverse.org/reference/ggtheme.html](https://ggplot2.tidyverse.org/reference/ggtheme.html).\n`theme_minimal()` and `theme_light()` are popular, and `theme_void()`\ncan be useful as a starting point to create a new hand-crafted theme.\n\nThe [ggthemes](https://jrnold.github.io/ggthemes/reference/index.html)\npackage provides a wide variety of options (including an Excel 2003\ntheme). The [`ggplot2` extensions\nwebsite](https://exts.ggplot2.tidyverse.org/) provides a list of\npackages that extend the capabilities of `ggplot2`, including additional\nthemes.\n\n:::\n\n## Customisation\n\nLet's come back to the faceted plot of mean expression by time and gene,\ncolored by sex.\n\nTake a look at the \n[`ggplot2` cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf),\nand think of ways you could improve the plot.\n\nNow, we can change names of axes to something more informative than\n'time' and 'mean\\_exp', and add a title to the figure:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mean_exp_by_time_sex, aes(x = time, y = mean_exp, color = sex)) +\n    geom_line() +\n    facet_wrap(~gene, scales = \"free_y\") +\n    theme_bw() +\n    theme(panel.grid = element_blank()) +\n    labs(\n        title = \"Mean gene expression by duration of the infection\",\n        x = \"Duration of the infection (in days)\",\n        y = \"Mean gene expression\"\n    )\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\nThe axes have more informative names, but their readability can be\nimproved by increasing the font size:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mean_exp_by_time_sex, aes(x = time, y = mean_exp, color = sex)) +\n    geom_line() +\n    facet_wrap(~gene, scales = \"free_y\") +\n    theme_bw() +\n    theme(panel.grid = element_blank()) +\n    labs(\n        title = \"Mean gene expression by duration of the infection\",\n        x = \"Duration of the infection (in days)\",\n        y = \"Mean gene expression\"\n    ) +\n    theme(text = element_text(size = 16))\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n## Composing plots\n\nFaceting is a great tool for splitting one plot into multiple subplots,\nbut sometimes you may want to produce a single figure that contains\nmultiple independent plots, i.e. plots that are based on different\nvariables or even different data frames.\n\nLet's start by creating the two plots that we want to arrange next to\neach other:\n\nThe first graph counts the number of unique genes per chromosome. We\nfirst need to reorder the levels of `chromosome_name` and filter the\nunique genes per chromosome. We also change the scale of the y-axis to a\nlog10 scale for better readability.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_genecount <- rna |>\n    mutate(\n        chromosome_name = factor(chromosome_name, levels = c(1:19, \"X\", \"Y\"))\n    ) |>\n    select(chromosome_name, gene) |>\n    distinct() |>\n    ggplot() +\n    geom_bar(\n        aes(x = chromosome_name), fill = \"seagreen\",\n        position = \"dodge\", stat = \"count\"\n    ) +\n    labs(y = \"log10(n genes)\", x = \"chromosome\") +\n    scale_y_log10()\n\np_genecount\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\nBelow, we also remove the legend altogether by setting the\n`legend.position` to `\"none\"`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_box <- ggplot(rna, aes(y = expression_log, x = as.factor(time), color = sex)) +\n    geom_boxplot(alpha = 0) +\n    labs(y = \"Mean gene exp\", x = \"time\") + \n    theme(legend.position = \"none\")\n\np_box\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\nThe [**patchwork**](https://github.com/thomasp85/patchwork) package\nprovides an elegant approach to combining figures using the `+` to\narrange figures (typically side by side). More specifically the `|`\nexplicitly arranges them side by side and `/` stacks them on top of each\nother.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"patchwork\")\np_genecount + p_box\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np_genecount / p_box\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/patchwork2-1.png){width=672}\n:::\n:::\n\n\nWe can combine further control the layout of the final composition with\n`plot_layout` to create more complex layouts:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_genecount + p_box + plot_layout(ncol = 1)\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/patchwork3-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np_genecount +\n (p_genecount + p_box) +\n p_box +\n plot_layout(ncol = 1)\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/patchwork4-1.png){width=672}\n:::\n\n```{.r .cell-code}\np_genecount /\n    (p_genecount + p_box) /\n    p_box\n```\n\n::: {.cell-output-display}\n![](03_visualization_files/figure-html/patchwork4-2.png){width=672}\n:::\n:::\n\n\nLearn more about `patchwork` on its\n[webpage](https://patchwork.data-imaginist.com/).\n\n## Exporting plots\n\nAfter creating your plot, you can save it to a file in your favorite\nformat. The Export tab in the **Plot** pane in RStudio will save your\nplots at low resolution, which will not be accepted by many journals and\nwill not scale well for posters.\n\nInstead, use the `ggsave()` function, which allows you easily change the\ndimension and resolution of your plot by adjusting the appropriate\narguments (`width`, `height` and `dpi`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_plot <- ggplot(mean_exp_by_time_sex, aes(x = time, y = mean_exp, color = sex)) +\n    geom_line() +\n    facet_wrap(~gene, scales = \"free_y\") +\n    labs(\n        title = \"Mean gene expression by duration of the infection\",\n        x = \"Duration of the infection (in days)\",\n        y = \"Mean gene expression\"\n    ) +\n    guides(color = guide_legend(title = \"Gender\")) +\n    theme_bw() +\n    theme(\n        axis.text.x = element_text(colour = \"royalblue4\", size = 12),\n        axis.text.y = element_text(colour = \"royalblue4\", size = 12),\n        text = element_text(size = 16),\n        legend.position = \"top\"\n    )\n\n\nggsave(\n    my_plot, \n    file = here(\"output\", \"figs\", \"mean_exp_by_time_sex.png\"),\n    width = 15, height = 10, dpi = 300\n)\n```\n:::\n",
    "supporting": [
      "03_visualization_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}